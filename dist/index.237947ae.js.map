{"mappings":"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","sources":["<anon>","src/dropdown.js"],"sourcesContent":["(function () {\nvar $c4e5f7332bde19dc$exports = {};\n// Create an App function\n/**\n * This function is responsible for the initialization of the application.\n * It will be called when the window has finished loading.\n * @returns {void}\n */ function $c4e5f7332bde19dc$var$App() {\n    const mediaQuery = /**@type {string} */ 'only screen and (max-width:767px)';\n    const navElement = /**@type {HTMLElement | null} */ document.querySelector('.nav-container');\n    const dropShadow = /**@type {HTMLElement | null} */ document.querySelector('.dropshadow-overlay');\n    console.log(dropShadow);\n    $c4e5f7332bde19dc$var$handleMediaQuery(mediaQuery);\n    $c4e5f7332bde19dc$var$navComponent(navElement);\n    $c4e5f7332bde19dc$var$dropDownComponent(navElement);\n    $c4e5f7332bde19dc$var$dropShadowComponent(navElement, dropShadow);\n}\n/**\n * This function is responsible for handling the media query.\n * @param {string} query - The media query to be handled.\n * @returns {void}\n */ function $c4e5f7332bde19dc$var$handleMediaQuery(query) {\n    const isMobileDevice = /** @type {boolean}*/ window.matchMedia(query).matches;\n    const navMenu = /**@type {HTMLDivElement | null} */ document.querySelector('.nav-menu');\n    navMenu?.setAttribute('aria-hidden', `${isMobileDevice ? 'true' : 'false'}`);\n}\n/**\n * This navigation component is responsible for handling the navigation element.\n * @param {HTMLElement | null} nav - The navigation element to be handled.\n * @returns {void}\n */ function $c4e5f7332bde19dc$var$navComponent(nav) {\n    nav?.addEventListener('click', $c4e5f7332bde19dc$var$handleMobileNavMenu.bind(null, nav));\n}\n/**\n * This function is responsible for handling the functionality mobile navigation\n * @param {HTMLElement | null} nav - The navigation element to be\n * @param {Event} evtObj - The event object.\n * @returns {void}\n */ function $c4e5f7332bde19dc$var$handleMobileNavMenu(nav, evtObj) {\n    // Get the nav-menu element\n    const navMenu = nav?.querySelector('.nav-menu');\n    // Get the event target\n    const eventTarget = /**@type {HTMLElement} */ evtObj.target;\n    if (!(eventTarget instanceof HTMLElement)) return;\n    // Get the mobile navigation element by search up the DOM tree\n    const mobileNavBtn = /**@type {HTMLButtonElement | null}*/ eventTarget.closest('.menuBtn');\n    if (!mobileNavBtn) return;\n    // Get the dropshadow-overlayElement\n    const dropShadowOverlay = /**@type {HTMLDivElement | null}*/ document.querySelector('.dropshadow-overlay');\n    // On mobile devices the value of aria-expanded is check and we need to manipulate it dynamically depending on the state.\n    const closedMenu = /**@type {Boolean} */ mobileNavBtn.getAttribute('aria-expanded') === 'false' || false;\n    // Using the closedMenu variable we want to remove the aria-expanded attribute on the clicked mobileNavBtn\n    mobileNavBtn.removeAttribute('aria-expanded');\n    // Remove the active class from the mobileNavBtn\n    mobileNavBtn.classList.remove('active');\n    // Using the closedMenu variable we want to dynamically alter the the aria-hidden attribute of the navMenu element\n    navMenu?.setAttribute('aria-hidden', `${!closedMenu}`);\n    // We need to check if the value of the aria-expanded attribute of the mobileNavBtn element is true and if the next sibling element of the mobileNavBtn element is a button element\n    if (closedMenu && mobileNavBtn.nextElementSibling instanceof HTMLButtonElement) {\n        // Using the closedMenu variable we want to dynamically alter the aria-expanded attribute of the sibling element of the mobileNavBtn element which is also a button element\n        mobileNavBtn?.nextElementSibling?.setAttribute('aria-expanded', `${closedMenu}`);\n        mobileNavBtn?.nextElementSibling?.classList.add('active');\n        navMenu?.classList.add('active');\n        dropShadowOverlay?.classList.add('active');\n    } else {\n        mobileNavBtn?.previousElementSibling?.setAttribute('aria-expanded', `${closedMenu}`);\n        mobileNavBtn?.previousElementSibling?.classList.add('active');\n        navMenu?.classList.remove('active');\n        dropShadowOverlay?.classList.remove('active');\n    }\n    // Call the animate function to animate the navigation links and account buttons\n    $c4e5f7332bde19dc$var$animateNavMenu();\n}\n/**\n * This function animates the navigation links and the account buttons\n */ function $c4e5f7332bde19dc$var$animateNavMenu() {\n    const navLinksButtons = /**@type {NodeListOf<HTMLLIElement>}*/ document.querySelectorAll('.nav-menu__container > ul > li');\n    const DELAYDIVIDER = 25;\n    navLinksButtons.forEach(function(navLinkButton, index) {\n        // When the user clicks the first time there is no animation\n        // When they click again there is an existing animation\n        const fillMode = /** @type {HTMLLIElement} */ navLinkButton.style.animationFillMode;\n        if (fillMode.includes('forwards')) /**@type {HTMLLIElement} */ navLinkButton.style.animation = ``;\n        else /** @type {HTMLLIElement} */ navLinkButton.style.animation = `animate 0.8s ease forwards ${index / DELAYDIVIDER}s`;\n    });\n}\n/**\n * This function handles the dropdown menu button clicked by the user.\n * @param {HTMLElement | null} nav - The navigation element to be handled.\n * @returns {void}\n */ function $c4e5f7332bde19dc$var$dropDownComponent(nav) {\n    const menu = /**@type {HTMLUListElement}*/ nav?.querySelector('.nav-menu__links');\n    const btnControls = /**@type {NodeListOf<HTMLButtonElement>} */ document.querySelectorAll('.nav-menu__links button');\n    const submenus = /** @type {HTMLUListElement[]} */ [];\n    const useArrowKeys = /**@type {Boolean} */ true;\n    btnControls.forEach(function(btnControl) {\n        // We want to be sure that we are clicking on the button element\n        if (btnControl.hasAttribute('aria-controls')) {\n            const submenu = btnControl.parentNode?.querySelector('ul');\n            if (!submenu) return;\n            // save the reference that is controlled by the menu\n            submenus.push(submenu);\n            // Attach the event listeners\n            // When the user clicks the menu button, so we can open the submenu.\n            btnControl.addEventListener('click', $c4e5f7332bde19dc$var$handleBtnDropdown.bind(null, btnControls, submenus));\n            // When the button is expanded we want to be able to use arrow keys to navigate into the submenu.\n            btnControl.addEventListener('keydown', $c4e5f7332bde19dc$var$handleBtnKeyDown.bind(null, btnControls, submenus, useArrowKeys));\n            // When we are in the submenu we want to navigate between elements in the submenus\n            submenu.addEventListener('keydown', $c4e5f7332bde19dc$var$handleSubMenuKeyDown.bind(null, btnControls, submenus, useArrowKeys));\n        }\n    });\n    menu.addEventListener('focusout', $c4e5f7332bde19dc$var$onFocusOut.bind(null, btnControls, submenus));\n}\n/**\n * This function handles the functionality of the arrow keys when the user navigates inside the submenu\n * @param {NodeList} btnControls - The buttons\n *  @param {HTMLUListElement[]} submenus - The submenus\n * @param {boolean} useArrowKeys - The current state of the arrows keys\n * @param {KeyboardEvent} evtObj - The keyboard event object\n * @returns {void}\n */ function $c4e5f7332bde19dc$var$handleSubMenuKeyDown(btnControls, submenus, useArrowKeys, evtObj) {\n    // We want to get the element that currently has focus when the event is triggered in the submenu\n    const activeElement = document.activeElement;\n    // Using the eventListener attached to the submenu we can navigate to its sibling and obtain the button.\n    const btn = /**@type {HTMLButtonElement }*/ evtObj.currentTarget.previousElementSibling;\n    // We want be sure that the button element is an instance of HTMLButtonElement\n    if (!(btn instanceof HTMLButtonElement)) return;\n    // We need the index of the button of its submenu\n    const btnIndex = Array.from(btnControls).indexOf(btn);\n    // We can get all the links in the submenu by using the index of the button element to get the submenu we are on then find all the links in that submenu\n    const menuLinks = Array.from(submenus[btnIndex].querySelectorAll('a'));\n    // Check if the active element exists\n    if (activeElement) {\n        // If the active element is an instance of the anchor element which is what we want we can proceed and if not return and stop the execution of the function.\n        if (!(activeElement instanceof HTMLAnchorElement)) return;\n        // So from all the anchor elements in the array menuLinks we want to know the active anchor element's index.\n        const activeElementIndex = menuLinks.indexOf(activeElement);\n        // We the user presses the escape key or button\n        if (evtObj.key === 'Escape') {\n            // Change the nodeList of an button to an array of button elements.\n            const btnArray = Array.from(btnControls);\n            // Check if the element in the button array exist\n            if (btnArray[btnIndex]) // Move the focus back to the button element\n            /**@type {HTMLButtonElement}*/ btnArray[btnIndex].focus();\n            // Then we can close the submenu element\n            $c4e5f7332bde19dc$var$toggleBtnExpanded(btnIndex, false, submenus, btnControls);\n        } else if (useArrowKeys) $c4e5f7332bde19dc$var$controlFocusByKey(evtObj, menuLinks, activeElementIndex);\n    }\n}\n/**\n * This function handles the functionality of the arrow keys, Home, and End Keys when the user navigates into the submenu.\n * @param {NodeList} btnControls - The buttons\n * @param {HTMLUListElement[]} submenus - The submenus\n * @param {boolean} useArrowKeys - The current state of the arrows keys\n * @param {KeyboardEvent} evtObj - The event object\n * @returns {void}\n */ function $c4e5f7332bde19dc$var$handleBtnKeyDown(btnControls, submenus, useArrowKeys, evtObj) {\n    // We need to get the element that currently has focus when the user keys down or presses any key on the button element.\n    const activeElement = document.activeElement;\n    // The currentTarget gives us the button element since that is the element that the event listener is attached to.\n    const btn = /**@type {HTMLButtonElement}*/ evtObj.currentTarget;\n    // We can get the index of the Array of buttons\n    const btnIndex = Array.from(btnControls).indexOf(btn);\n    if (activeElement) {\n        // We want to get the index of the active element that current has focus which is the button element.\n        const activeElementIndex = Array.from(btnControls).indexOf(activeElement);\n        if (evtObj.key === 'Escape') $c4e5f7332bde19dc$var$toggleBtnExpanded(btnIndex, false, submenus, btnControls);\n        else if (useArrowKeys && btnIndex === activeElementIndex && evtObj.key === 'ArrowDown') submenus[btnIndex].querySelector('a')?.focus();\n        else if (useArrowKeys) $c4e5f7332bde19dc$var$controlFocusByKey(evtObj, btnControls, activeElementIndex);\n    }\n}\n/**\n * This function controls the focus based on the keys pressed by the user Arrow Up/Down, Home, End, and Arrow Left/Right\n * @param {KeyboardEvent} evtObj - The event object\n * @param {NodeList | HTMLElement[]} collection - The buttons\n * @param {number} activeElementIndex - The index\n * @returns {void}\n */ function $c4e5f7332bde19dc$var$controlFocusByKey(evtObj, collection, activeElementIndex) {\n    const ONE = 1;\n    const ZERO = 0;\n    switch(evtObj.key){\n        case 'ArrowUp':\n        case 'ArrowLeft':\n            evtObj.preventDefault();\n            if (activeElementIndex > -ONE) {\n                const prevIndex = Math.max(ZERO, activeElementIndex - ONE);\n                /**@type {HTMLButtonElement}*/ collection[prevIndex].focus();\n            }\n            break;\n        case 'ArrowDown':\n        case 'ArrowRight':\n            evtObj.preventDefault();\n            if (activeElementIndex > -ONE) {\n                const nextIndex = Math.min(collection.length - ONE, activeElementIndex + ONE);\n                /**@type {HTMLButtonElement}*/ collection[nextIndex].focus();\n            }\n            break;\n        case 'Home':\n            /**@type {HTMLButtonElement}*/ collection[ZERO].focus();\n            break;\n        case 'End':\n            /**@type {HTMLButtonElement}*/ collection[collection.length - ONE].focus();\n            break;\n        default:\n    }\n}\n/**\n * This function handles the button which triggers the dropdown menu when clicked on.\n * @param {NodeList} btnControls - The buttons\n * @param {HTMLUListElement[]} submenus - The submenus\n * @param {Event} evtObj - The event object.\n * @returns {void}\n */ function $c4e5f7332bde19dc$var$handleBtnDropdown(btnControls, submenus, evtObj) {\n    // The target gives us the button clicked\n    const btn = /**@type {HTMLButtonElement}*/ evtObj.target;\n    // We get the index of the button element from the ModeList of buttons\n    const btnIndex = Array.from(btnControls).indexOf(btn);\n    // We want to know if the button is currently expanded as at when clicked\n    const isBtnExpanded = btn?.getAttribute('aria-expanded') === 'true';\n    // We simply toggle the button and show the submenu\n    $c4e5f7332bde19dc$var$toggleBtnExpanded(btnIndex, !isBtnExpanded, submenus, btnControls);\n}\n/**\n * This function is called when the user clicks the button and we want to toggle opening and closing the dropdown menu.\n * @param {number} index - The index of the button that is clicked.\n * @param {boolean} isExpanded -- The value of isExpanded that lets us know the state of the dropdown menu when clicked.\n * @param {HTMLUListElement[]} submenus - The list of submenus.\n * @param {NodeList} btnControls - The buttons\n * @returns {void}\n */ function $c4e5f7332bde19dc$var$toggleBtnExpanded(index, isExpanded, submenus, btnControls) {\n    if (btnControls[index]) {\n        /**@type {HTMLButtonElement}*/ btnControls[index].setAttribute('aria-expanded', `${isExpanded}`);\n        $c4e5f7332bde19dc$var$toggleMenu(submenus[index], isExpanded);\n    }\n}\n/**\n * The function to toggle displaying and hiding the menu.\n * @param {HTMLUListElement} submenu -The navigation submenu\n * @param {boolean} display - The state that indicates whether the submenu is expanded or not.\n */ function $c4e5f7332bde19dc$var$toggleMenu(submenu, display) {\n    if (submenu) {\n        console.log(display);\n        submenu.style.display = display ? 'block' : 'none';\n    }\n}\n/**\n * The function handles when the menu no longer has focus.\n * @param {NodeList} btnControls - The buttons\n * @param {HTMLUListElement[]} submenus - The submenus\n * @param {FocusEvent} evtObj - The focus event\n * @returns {void}\n */ function $c4e5f7332bde19dc$var$onFocusOut(btnControls, submenus, evtObj) {\n    // When any element in the menu has just gained focus we want to know that element.\n    const hasGainedFocus = /**@type {HTMLElement}*/ evtObj.relatedTarget;\n    // We want to know if the menu element contains any element that has just gained focus.\n    const menuContainsFocus = /**@type {HTMLUListElement}*/ evtObj.currentTarget.contains(hasGainedFocus);\n    if (!menuContainsFocus) // Loop over the buttons close the submenu\n    btnControls.forEach(function(__, index, btnControls) {\n        $c4e5f7332bde19dc$var$toggleBtnExpanded(index, false, submenus, btnControls);\n    });\n}\n/**\n * This function will close the mobile nav menu when the user click on the dropshadow\n * @param {HTMLElement | null} nav - The nav element\n * @param {HTMLElement | null} dropshadow - The dropshadow element\n * @returns {void}\n */ function $c4e5f7332bde19dc$var$dropShadowComponent(nav, dropshadow) {\n    dropshadow?.addEventListener('click', function() {\n        // Get the navigation menu element\n        const navMenu = nav?.querySelector('.nav-menu');\n        // We need the button element that is currently visible on the page.\n        const mobileNavBtn = nav?.querySelector('button[class~=\"active\"]');\n        // On mobile devices the value of aria-expanded is checked and we need to manipulate it dynamically depending on the state.\n        const openedMenu = /**@type {Boolean} */ mobileNavBtn?.getAttribute('aria-expanded') === 'false' || false;\n        mobileNavBtn?.setAttribute('aria-expanded', `${!openedMenu}`);\n        mobileNavBtn?.classList.remove('active');\n        mobileNavBtn?.previousElementSibling?.setAttribute('aria-expanded', `${openedMenu}`);\n        console.log(mobileNavBtn?.previousElementSibling);\n        mobileNavBtn?.previousElementSibling?.classList.add('active');\n        dropshadow.classList.remove('active');\n        navMenu?.classList.remove('active');\n    });\n}\n$c4e5f7332bde19dc$var$App();\n\n})();\n//# sourceMappingURL=index.237947ae.js.map\n","// Create an App function\n/**\n * This function is responsible for the initialization of the application.\n * It will be called when the window has finished loading.\n * @returns {void}\n */\nfunction App() {\n  const mediaQuery = /**@type {string} */ 'only screen and (max-width:767px)';\n  const navElement = /**@type {HTMLElement | null} */ (\n    document.querySelector('.nav-container')\n  );\n  const dropShadow = /**@type {HTMLElement | null} */ (\n    document.querySelector('.dropshadow-overlay')\n  );\n  console.log(dropShadow);\n  handleMediaQuery(mediaQuery);\n  navComponent(navElement);\n  dropDownComponent(navElement);\n  dropShadowComponent(navElement, dropShadow);\n}\n\n/**\n * This function is responsible for handling the media query.\n * @param {string} query - The media query to be handled.\n * @returns {void}\n */\nfunction handleMediaQuery(query) {\n  const isMobileDevice = /** @type {boolean}*/ window.matchMedia(query).matches;\n  const navMenu = /**@type {HTMLDivElement | null} */ (\n    document.querySelector('.nav-menu')\n  );\n  navMenu?.setAttribute('aria-hidden', `${isMobileDevice ? 'true' : 'false'}`);\n}\n/**\n * This navigation component is responsible for handling the navigation element.\n * @param {HTMLElement | null} nav - The navigation element to be handled.\n * @returns {void}\n */\nfunction navComponent(nav) {\n  nav?.addEventListener('click', handleMobileNavMenu.bind(null, nav));\n}\n\n/**\n * This function is responsible for handling the functionality mobile navigation\n * @param {HTMLElement | null} nav - The navigation element to be\n * @param {Event} evtObj - The event object.\n * @returns {void}\n */\nfunction handleMobileNavMenu(nav, evtObj) {\n  // Get the nav-menu element\n  const navMenu = nav?.querySelector('.nav-menu');\n\n  // Get the event target\n  const eventTarget = /**@type {HTMLElement} */ (evtObj.target);\n  if (!(eventTarget instanceof HTMLElement)) return;\n\n  // Get the mobile navigation element by search up the DOM tree\n  const mobileNavBtn = /**@type {HTMLButtonElement | null}*/ (\n    eventTarget.closest('.menuBtn')\n  );\n  if (!mobileNavBtn) return;\n\n  // Get the dropshadow-overlayElement\n  const dropShadowOverlay = /**@type {HTMLDivElement | null}*/ (\n    document.querySelector('.dropshadow-overlay')\n  );\n\n  // On mobile devices the value of aria-expanded is check and we need to manipulate it dynamically depending on the state.\n  const closedMenu = /**@type {Boolean} */ (\n    mobileNavBtn.getAttribute('aria-expanded') === 'false' || false\n  );\n\n  // Using the closedMenu variable we want to remove the aria-expanded attribute on the clicked mobileNavBtn\n  mobileNavBtn.removeAttribute('aria-expanded');\n\n  // Remove the active class from the mobileNavBtn\n  mobileNavBtn.classList.remove('active');\n\n  // Using the closedMenu variable we want to dynamically alter the the aria-hidden attribute of the navMenu element\n  navMenu?.setAttribute('aria-hidden', `${!closedMenu}`);\n\n  // We need to check if the value of the aria-expanded attribute of the mobileNavBtn element is true and if the next sibling element of the mobileNavBtn element is a button element\n  if (\n    closedMenu &&\n    mobileNavBtn.nextElementSibling instanceof HTMLButtonElement\n  ) {\n    // Using the closedMenu variable we want to dynamically alter the aria-expanded attribute of the sibling element of the mobileNavBtn element which is also a button element\n    mobileNavBtn?.nextElementSibling?.setAttribute(\n      'aria-expanded',\n      `${closedMenu}`\n    );\n    mobileNavBtn?.nextElementSibling?.classList.add('active');\n    navMenu?.classList.add('active');\n    dropShadowOverlay?.classList.add('active');\n  } else {\n    mobileNavBtn?.previousElementSibling?.setAttribute(\n      'aria-expanded',\n      `${closedMenu}`\n    );\n    mobileNavBtn?.previousElementSibling?.classList.add('active');\n    navMenu?.classList.remove('active');\n    dropShadowOverlay?.classList.remove('active');\n  }\n\n  // Call the animate function to animate the navigation links and account buttons\n  animateNavMenu();\n}\n\n/**\n * This function animates the navigation links and the account buttons\n */\nfunction animateNavMenu() {\n  const navLinksButtons = /**@type {NodeListOf<HTMLLIElement>}*/ (\n    document.querySelectorAll('.nav-menu__container > ul > li')\n  );\n  const DELAYDIVIDER = 25;\n\n  navLinksButtons.forEach(function (navLinkButton, index) {\n    // When the user clicks the first time there is no animation\n    // When they click again there is an existing animation\n    const fillMode = /** @type {HTMLLIElement} */ (navLinkButton).style\n      .animationFillMode;\n    if (fillMode.includes('forwards')) {\n      /**@type {HTMLLIElement} */ (navLinkButton).style.animation = ``;\n    } else {\n      /** @type {HTMLLIElement} */ (navLinkButton).style.animation =\n        `animate 0.8s ease forwards ${index / DELAYDIVIDER}s`;\n    }\n  });\n}\n\n/**\n * This function handles the dropdown menu button clicked by the user.\n * @param {HTMLElement | null} nav - The navigation element to be handled.\n * @returns {void}\n */\nfunction dropDownComponent(nav) {\n  const menu = /**@type {HTMLUListElement}*/ (\n    nav?.querySelector('.nav-menu__links')\n  );\n  const btnControls = /**@type {NodeListOf<HTMLButtonElement>} */ (\n    document.querySelectorAll('.nav-menu__links button')\n  );\n  const submenus = /** @type {HTMLUListElement[]} */ ([]);\n  const useArrowKeys = /**@type {Boolean} */ (true);\n\n  btnControls.forEach(function (btnControl) {\n    // We want to be sure that we are clicking on the button element\n    if (btnControl.hasAttribute('aria-controls')) {\n      const submenu = btnControl.parentNode?.querySelector('ul');\n      if (!submenu) return;\n      // save the reference that is controlled by the menu\n      submenus.push(submenu);\n\n      // Attach the event listeners\n\n      // When the user clicks the menu button, so we can open the submenu.\n      btnControl.addEventListener(\n        'click',\n        handleBtnDropdown.bind(null, btnControls, submenus)\n      );\n\n      // When the button is expanded we want to be able to use arrow keys to navigate into the submenu.\n      btnControl.addEventListener(\n        'keydown',\n        handleBtnKeyDown.bind(null, btnControls, submenus, useArrowKeys)\n      );\n\n      // When we are in the submenu we want to navigate between elements in the submenus\n      submenu.addEventListener(\n        'keydown',\n        handleSubMenuKeyDown.bind(null, btnControls, submenus, useArrowKeys)\n      );\n    }\n  });\n\n  menu.addEventListener(\n    'focusout',\n    onFocusOut.bind(null, btnControls, submenus)\n  );\n}\n/**\n * This function handles the functionality of the arrow keys when the user navigates inside the submenu\n * @param {NodeList} btnControls - The buttons\n *  @param {HTMLUListElement[]} submenus - The submenus\n * @param {boolean} useArrowKeys - The current state of the arrows keys\n * @param {KeyboardEvent} evtObj - The keyboard event object\n * @returns {void}\n */\nfunction handleSubMenuKeyDown(btnControls, submenus, useArrowKeys, evtObj) {\n  // We want to get the element that currently has focus when the event is triggered in the submenu\n  const activeElement = document.activeElement;\n  // Using the eventListener attached to the submenu we can navigate to its sibling and obtain the button.\n  const btn = /**@type {HTMLButtonElement }*/ (evtObj.currentTarget)\n    .previousElementSibling;\n  // We want be sure that the button element is an instance of HTMLButtonElement\n  if (!(btn instanceof HTMLButtonElement)) return;\n  // We need the index of the button of its submenu\n  const btnIndex = Array.from(btnControls).indexOf(btn);\n  // We can get all the links in the submenu by using the index of the button element to get the submenu we are on then find all the links in that submenu\n  const menuLinks = Array.from(submenus[btnIndex].querySelectorAll('a'));\n  // Check if the active element exists\n  if (activeElement) {\n    // If the active element is an instance of the anchor element which is what we want we can proceed and if not return and stop the execution of the function.\n    if (!(activeElement instanceof HTMLAnchorElement)) return;\n    // So from all the anchor elements in the array menuLinks we want to know the active anchor element's index.\n    const activeElementIndex = menuLinks.indexOf(activeElement);\n\n    // We the user presses the escape key or button\n    if (evtObj.key === 'Escape') {\n      // Change the nodeList of an button to an array of button elements.\n      const btnArray = Array.from(btnControls);\n      // Check if the element in the button array exist\n      if (btnArray[btnIndex]) {\n        // Move the focus back to the button element\n        /**@type {HTMLButtonElement}*/ (btnArray[btnIndex]).focus();\n      }\n      // Then we can close the submenu element\n      toggleBtnExpanded(btnIndex, false, submenus, btnControls);\n    }\n\n    // We get the condition of the useArrowKeys which is true then we can now navigate inside the submenu by using the arrow keys to move between the links.\n    else if (useArrowKeys) {\n      controlFocusByKey(evtObj, menuLinks, activeElementIndex);\n    }\n  }\n}\n/**\n * This function handles the functionality of the arrow keys, Home, and End Keys when the user navigates into the submenu.\n * @param {NodeList} btnControls - The buttons\n * @param {HTMLUListElement[]} submenus - The submenus\n * @param {boolean} useArrowKeys - The current state of the arrows keys\n * @param {KeyboardEvent} evtObj - The event object\n * @returns {void}\n */\nfunction handleBtnKeyDown(btnControls, submenus, useArrowKeys, evtObj) {\n  // We need to get the element that currently has focus when the user keys down or presses any key on the button element.\n  const activeElement = document.activeElement;\n  // The currentTarget gives us the button element since that is the element that the event listener is attached to.\n  const btn = /**@type {HTMLButtonElement}*/ (evtObj.currentTarget);\n  // We can get the index of the Array of buttons\n  const btnIndex = Array.from(btnControls).indexOf(btn);\n  if (activeElement) {\n    // We want to get the index of the active element that current has focus which is the button element.\n    const activeElementIndex = Array.from(btnControls).indexOf(activeElement);\n    if (evtObj.key === 'Escape') {\n      toggleBtnExpanded(btnIndex, false, submenus, btnControls);\n    }\n\n    // We use the arrow keys to move focus into the first anchor element of the submenu as the active element changes\n    else if (\n      useArrowKeys &&\n      btnIndex === activeElementIndex &&\n      evtObj.key === 'ArrowDown'\n    ) {\n      submenus[btnIndex].querySelector('a')?.focus();\n    }\n\n    // Using the condition of the 'useArrowkeys' we want to navigate between the top level buttons, if set\n    else if (useArrowKeys) {\n      controlFocusByKey(evtObj, btnControls, activeElementIndex);\n    }\n  }\n}\n\n/**\n * This function controls the focus based on the keys pressed by the user Arrow Up/Down, Home, End, and Arrow Left/Right\n * @param {KeyboardEvent} evtObj - The event object\n * @param {NodeList | HTMLElement[]} collection - The buttons\n * @param {number} activeElementIndex - The index\n * @returns {void}\n */\nfunction controlFocusByKey(evtObj, collection, activeElementIndex) {\n  const ONE = 1;\n  const ZERO = 0;\n  switch (evtObj.key) {\n    case 'ArrowUp':\n    case 'ArrowLeft':\n      evtObj.preventDefault();\n      if (activeElementIndex > -ONE) {\n        const prevIndex = Math.max(ZERO, activeElementIndex - ONE);\n        /**@type {HTMLButtonElement}*/ (collection[prevIndex]).focus();\n      }\n      break;\n    case 'ArrowDown':\n    case 'ArrowRight':\n      evtObj.preventDefault();\n      if (activeElementIndex > -ONE) {\n        const nextIndex = Math.min(\n          collection.length - ONE,\n          activeElementIndex + ONE\n        );\n        /**@type {HTMLButtonElement}*/ (collection[nextIndex]).focus();\n      }\n      break;\n    case 'Home':\n      /**@type {HTMLButtonElement}*/ (collection[ZERO]).focus();\n      break;\n    case 'End':\n      /**@type {HTMLButtonElement}*/ (\n        collection[collection.length - ONE]\n      ).focus();\n      break;\n    default:\n  }\n}\n\n/**\n * This function handles the button which triggers the dropdown menu when clicked on.\n * @param {NodeList} btnControls - The buttons\n * @param {HTMLUListElement[]} submenus - The submenus\n * @param {Event} evtObj - The event object.\n * @returns {void}\n */\nfunction handleBtnDropdown(btnControls, submenus, evtObj) {\n  // The target gives us the button clicked\n  const btn = /**@type {HTMLButtonElement}*/ (evtObj.target);\n  // We get the index of the button element from the ModeList of buttons\n  const btnIndex = Array.from(btnControls).indexOf(btn);\n  // We want to know if the button is currently expanded as at when clicked\n  const isBtnExpanded = btn?.getAttribute('aria-expanded') === 'true';\n  // We simply toggle the button and show the submenu\n  toggleBtnExpanded(btnIndex, !isBtnExpanded, submenus, btnControls);\n}\n\n/**\n * This function is called when the user clicks the button and we want to toggle opening and closing the dropdown menu.\n * @param {number} index - The index of the button that is clicked.\n * @param {boolean} isExpanded -- The value of isExpanded that lets us know the state of the dropdown menu when clicked.\n * @param {HTMLUListElement[]} submenus - The list of submenus.\n * @param {NodeList} btnControls - The buttons\n * @returns {void}\n */\nfunction toggleBtnExpanded(index, isExpanded, submenus, btnControls) {\n  if (btnControls[index]) {\n    /**@type {HTMLButtonElement}*/ (btnControls[index]).setAttribute(\n      'aria-expanded',\n      `${isExpanded}`\n    );\n    toggleMenu(submenus[index], isExpanded);\n  }\n}\n\n/**\n * The function to toggle displaying and hiding the menu.\n * @param {HTMLUListElement} submenu -The navigation submenu\n * @param {boolean} display - The state that indicates whether the submenu is expanded or not.\n */\nfunction toggleMenu(submenu, display) {\n  if (submenu) {\n    console.log(display);\n    submenu.style.display = display ? 'block' : 'none';\n  }\n}\n\n/**\n * The function handles when the menu no longer has focus.\n * @param {NodeList} btnControls - The buttons\n * @param {HTMLUListElement[]} submenus - The submenus\n * @param {FocusEvent} evtObj - The focus event\n * @returns {void}\n */\nfunction onFocusOut(btnControls, submenus, evtObj) {\n  // When any element in the menu has just gained focus we want to know that element.\n  const hasGainedFocus = /**@type {HTMLElement}*/ (evtObj.relatedTarget);\n\n  // We want to know if the menu element contains any element that has just gained focus.\n  const menuContainsFocus = /**@type {HTMLUListElement}*/ (\n    evtObj.currentTarget\n  ).contains(hasGainedFocus);\n\n  if (!menuContainsFocus) {\n    // Loop over the buttons close the submenu\n    btnControls.forEach(function (__, index, btnControls) {\n      toggleBtnExpanded(index, false, submenus, btnControls);\n    });\n  }\n}\n\n/**\n * This function will close the mobile nav menu when the user click on the dropshadow\n * @param {HTMLElement | null} nav - The nav element\n * @param {HTMLElement | null} dropshadow - The dropshadow element\n * @returns {void}\n */\nfunction dropShadowComponent(nav, dropshadow) {\n  dropshadow?.addEventListener('click', function () {\n    // Get the navigation menu element\n    const navMenu = nav?.querySelector('.nav-menu');\n    // We need the button element that is currently visible on the page.\n    const mobileNavBtn = nav?.querySelector('button[class~=\"active\"]');\n    // On mobile devices the value of aria-expanded is checked and we need to manipulate it dynamically depending on the state.\n\n    const openedMenu = /**@type {Boolean} */ (\n      mobileNavBtn?.getAttribute('aria-expanded') === 'false' || false\n    );\n    mobileNavBtn?.setAttribute('aria-expanded', `${!openedMenu}`);\n    mobileNavBtn?.classList.remove('active');\n    mobileNavBtn?.previousElementSibling?.setAttribute(\n      'aria-expanded',\n      `${openedMenu}`\n    );\n\n    console.log(mobileNavBtn?.previousElementSibling);\n    mobileNavBtn?.previousElementSibling?.classList.add('active');\n    dropshadow.classList.remove('active');\n    navMenu?.classList.remove('active');\n  });\n}\n\nApp();\n"],"names":["$c4e5f7332bde19dc$var$handleMobileNavMenu","nav","evtObj","navMenu","querySelector","eventTarget","target","HTMLElement","mobileNavBtn","closest","dropShadowOverlay","document","closedMenu","getAttribute","removeAttribute","classList","remove","setAttribute","nextElementSibling","HTMLButtonElement","add","previousElementSibling","navLinksButtons","querySelectorAll","forEach","navLinkButton","index","fillMode","style","animationFillMode","includes","animation","$c4e5f7332bde19dc$var$handleSubMenuKeyDown","btnControls","submenus","useArrowKeys","activeElement","btn","currentTarget","btnIndex","Array","from","indexOf","menuLinks","HTMLAnchorElement","activeElementIndex","key","btnArray","focus","$c4e5f7332bde19dc$var$toggleBtnExpanded","$c4e5f7332bde19dc$var$controlFocusByKey","$c4e5f7332bde19dc$var$handleBtnKeyDown","collection","preventDefault","Math","max","nextIndex","min","length","$c4e5f7332bde19dc$var$handleBtnDropdown","isExpanded","submenu","console","log","display","$c4e5f7332bde19dc$var$onFocusOut","hasGainedFocus","relatedTarget","contains","__","$c4e5f7332bde19dc$var$App","navElement","dropShadow","$c4e5f7332bde19dc$var$handleMediaQuery","query","isMobileDevice","window","matchMedia","matches","addEventListener","bind","$c4e5f7332bde19dc$var$dropDownComponent","menu","btnControl","hasAttribute","parentNode","push","openedMenu","dropshadow"],"version":3,"file":"index.237947ae.js.map"}